name: Deploy ENARM Prep to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev html-minifier-terser uglifycss uglify-js
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Copy files to build directory
      run: |
        cp -r css js data assets build/
        cp index.html sw.js manifest.json build/ || true
        cp README.md build/ || true
    
    - name: Minify HTML
      run: |
        npx html-minifier-terser \
          --input-dir . \
          --output-dir build \
          --file-ext html \
          --collapse-whitespace \
          --remove-comments \
          --remove-optional-tags \
          --remove-redundant-attributes \
          --remove-script-type-attributes \
          --remove-tag-whitespace \
          --use-short-doctype \
          --minify-css true \
          --minify-js true \
          index.html -o build/index.html
    
    - name: Minify CSS
      run: |
        npx uglifycss build/css/main.css > build/css/main.min.css
        npx uglifycss build/css/responsive.css > build/css/responsive.min.css
        # Replace original files with minified versions
        mv build/css/main.min.css build/css/main.css
        mv build/css/responsive.min.css build/css/responsive.css
    
    - name: Minify JavaScript
      run: |
        npx uglifyjs build/js/app.js -o build/js/app.min.js
        npx uglifyjs build/js/questions.js -o build/js/questions.min.js
        npx uglifyjs build/js/progress.js -o build/js/progress.min.js
        npx uglifyjs build/js/utils.js -o build/js/utils.min.js
        npx uglifyjs build/sw.js -o build/sw.min.js
        # Replace original files with minified versions
        mv build/js/app.min.js build/js/app.js
        mv build/js/questions.min.js build/js/questions.js
        mv build/js/progress.min.js build/js/progress.js
        mv build/js/utils.min.js build/js/utils.js
        mv build/sw.min.js build/sw.js
    
    - name: Generate sitemap.xml
      run: |
        cat > build/sitemap.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
          <url>
            <loc>https://${{ github.repository_owner }}.github.io/enarm-prep/</loc>
            <lastmod>$(date -Iseconds)</lastmod>
            <priority>1.0</priority>
          </url>
          <url>
            <loc>https://${{ github.repository_owner }}.github.io/enarm-prep/#practice</loc>
            <lastmod>$(date -Iseconds)</lastmod>
            <priority>0.8</priority>
          </url>
          <url>
            <loc>https://${{ github.repository_owner }}.github.io/enarm-prep/#study-guides</loc>
            <lastmod>$(date -Iseconds)</lastmod>
            <priority>0.7</priority>
          </url>
          <url>
            <loc>https://${{ github.repository_owner }}.github.io/enarm-prep/#progress</loc>
            <lastmod>$(date -Iseconds)</lastmod>
            <priority>0.6</priority>
          </url>
          <url>
            <loc>https://${{ github.repository_owner }}.github.io/enarm-prep/#flashcards</loc>
            <lastmod>$(date -Iseconds)</lastmod>
            <priority>0.6</priority>
          </url>
        </urlset>
        EOF
    
    - name: Generate robots.txt
      run: |
        cat > build/robots.txt << 'EOF'
        User-agent: *
        Allow: /
        
        Sitemap: https://${{ github.repository_owner }}.github.io/enarm-prep/sitemap.xml
        EOF
    
    - name: Create PWA manifest
      run: |
        cat > build/manifest.json << 'EOF'
        {
          "name": "ENARM Prep - PreparaciÃ³n para Residencias MÃ©dicas",
          "short_name": "ENARM Prep",
          "description": "Plataforma completa para preparar el Examen Nacional de Aspirantes a Residencias MÃ©dicas",
          "start_url": "./",
          "display": "standalone",
          "display_override": ["window-controls-overlay"],
          "background_color": "#ffffff",
          "theme_color": "#2563eb",
          "orientation": "any",
          "scope": "./",
          "lang": "es-MX",
          "categories": ["education", "medical", "productivity"],
          "shortcuts": [
            {
              "name": "PrÃ¡ctica de Preguntas",
              "short_name": "PrÃ¡ctica",
              "description": "Comenzar sesiÃ³n de prÃ¡ctica",
              "url": "./#practice",
              "icons": [{ "src": "assets/icons/practice-96x96.png", "sizes": "96x96" }]
            },
            {
              "name": "Mi Progreso",
              "short_name": "Progreso",
              "description": "Ver estadÃ­sticas de progreso",
              "url": "./#progress",
              "icons": [{ "src": "assets/icons/progress-96x96.png", "sizes": "96x96" }]
            }
          ],
          "icons": [
            {
              "src": "assets/icons/icon-72x72.png",
              "sizes": "72x72",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-96x96.png",
              "sizes": "96x96",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-128x128.png",
              "sizes": "128x128",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-144x144.png",
              "sizes": "144x144",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-152x152.png",
              "sizes": "152x152",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-192x192.png",
              "sizes": "192x192",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-384x384.png",
              "sizes": "384x384",
              "type": "image/png",
              "purpose": "maskable any"
            },
            {
              "src": "assets/icons/icon-512x512.png",
              "sizes": "512x512",
              "type": "image/png",
              "purpose": "maskable any"
            }
          ]
        }
        EOF
    
    - name: Add PWA manifest link to HTML
      run: |
        sed -i '/<head>/a\    <link rel="manifest" href="manifest.json">' build/index.html
    
    - name: Optimize images (if any exist)
      run: |
        # This would normally use imagemin or similar
        echo "Image optimization placeholder"
    
    - name: Generate build info
      run: |
        cat > build/build-info.json << EOF
        {
          "buildTime": "$(date -Iseconds)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "repository": "${{ github.repository }}",
          "workflow": "${{ github.workflow }}",
          "runNumber": "${{ github.run_number }}"
        }
        EOF
    
    - name: Run basic tests
      run: |
        echo "Running basic tests..."
        
        # Check if required files exist
        test -f build/index.html || { echo "Missing index.html"; exit 1; }
        test -f build/sw.js || { echo "Missing service worker"; exit 1; }
        test -f build/data/questions.json || { echo "Missing questions data"; exit 1; }
        
        # Validate JSON files
        node -e "
          try {
            JSON.parse(require('fs').readFileSync('build/data/questions.json', 'utf8'));
            console.log('âœ“ questions.json is valid');
          } catch(e) {
            console.error('âœ— questions.json is invalid:', e.message);
            process.exit(1);
          }
        "
        
        # Check CSS and JS files exist
        test -f build/css/main.css || { echo "Missing main.css"; exit 1; }
        test -f build/js/app.js || { echo "Missing app.js"; exit 1; }
        
        echo "âœ“ All basic tests passed"
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        enable_jekyll: false
        cname: # Add your custom domain here if you have one
        commit_message: 'Deploy ENARM Prep ${{ github.sha }}'
    
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: enarm-prep-build
        path: build/
        retention-days: 30
    
    - name: Comment PR with deploy preview
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸš€ Deploy Preview
            
            Your changes have been built successfully!
            
            ### ðŸ“Š Build Stats
            - **Commit**: \`${{ github.sha }}\`
            - **Branch**: \`${{ github.ref_name }}\`
            - **Build Time**: $(date)
            
            ### âœ… Tests Status
            - HTML validation: âœ… Passed
            - JSON validation: âœ… Passed  
            - File structure: âœ… Passed
            
            The build artifacts are available for download from the Actions tab.
            
            ---
            <sub>Generated by GitHub Actions</sub>`
          })

  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Audit URLs using Lighthouse
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://${{ github.repository_owner }}.github.io/enarm-prep/
        uploadArtifacts: true
        temporaryPublicStorage: true